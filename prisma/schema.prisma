// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   USER     
//   ADMIN
// }

// model User {
//   id        String    @id @default(cuid())
//   name      String
//   email     String    @unique
//   hashedPassword String @map("password") // Veritabanında 'password' olarak kalsın, modelde 'hashedPassword' olsun.
//   // Yeni Rol Alanı
//   role      Role      @default(USER) // Varsayılan olarak USER olarak ayarlanır
//   createdAt DateTime  @default(now())
//   // Blog yazılarıyla ilişkiler
//   posts     Post[]    
//   comments  Comment[]
//   likes     Like[]
// }

// model Category {
//   id        String    @id @default(cuid())
//   name      String    @unique
//   slug      String    @unique
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   posts     Post[] // Bu kategoriye ait blog yazıları
// }

// // --- Yeni ve Güncellenmiş Post Modeli ---
// model Post {
//   id               String      @id @default(cuid()) // ID tipini String/cuid yapalım
//   title            String
//   content          String      // Blog yazısının ana içeriği
//   excerpt          String?     // Yazının kısa özeti/açıklaması (Home page veya liste görünümleri için)
//   imageUrl         String?     // Kapak görseli
//   slug             String      @unique // URL dostu, benzersiz isim
//   isPublished      Boolean     @default(false) // Yayınlanma durumu
//   viewCount        Int         @default(0)  // Görüntülenme sayısı

//   // SEO Alanları
//   tags             String?     // Etiketler, virgülle ayrılmış bir String olarak tutulabilir.
//   keywords         String?     // SEO anahtar kelimeler
//   metaDescription  String?

//   createdAt        DateTime    @default(now())
//   updatedAt        DateTime    @updatedAt
//   publishedAt      DateTime?   // İlk yayınlanma tarihi

//   // İlişkiler
//   // 1. Yazar (Post, User)
//   author           User        @relation(fields: [authorId], references: [id])
//   authorId         String      // Yazarın ID'si

//   // 2. Kategori (Post, Category)
//   category         Category?   @relation(fields: [categoryId], references: [id])
//   categoryId       String?     // Kategori ID'si (Category modelinin ID tipi ile uyumlu olmalı)

//   // 3. Yorumlar (Post, Comment)
//   comments         Comment[]

//   // 4. Beğeniler (Post, Like - Yeni ara tablo)
//   likes            Like[]
// }

// // --- Yeni İlişki Modelleri: Yorumlar ve Beğeniler ---

// // Blog yazısı ile kullanıcı arasındaki 'beğenme' eylemi için ara model
// model Like {
//   id        String   @id @default(cuid())

//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String

//   user      User     @relation(fields: [userId], references: [id])
//   userId    String

//   createdAt DateTime @default(now())

//   // Bir kullanıcının aynı yazıyı birden fazla beğenmesini engellemek için
//   @@unique([postId, userId]) 
// }

// // Yorum Modeli
// model Comment {
//   id        String    @id @default(cuid())
//   content   String    

//   // Yorumun hangi yazıya ait olduğu
//   post      Post      @relation(fields: [postId], references: [id])
//   postId    String

//   // Yorumu yapan kullanıcı (Anonim yorumlara izin vermek için opsiyonel olabilir)
//   author    User?     @relation(fields: [authorId], references: [id])
//   authorId  String? 

//   // Yanıtlama sistemi (kendi kendine referans)
//   parent    Comment?  @relation("Reply", fields: [parentId], references: [id], onDelete: Cascade)
//   parentId  String?
//   replies   Comment[] @relation("Reply") // Bu yoruma yapılan yanıtlar

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }











datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}




model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  password      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  // Yeni ilişkiler
  books         Book[]
   movies Movie[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Blog Kategorileri
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Blog Yazıları
model Post {
  id              String     @id @default(cuid())
  title           String
  content         String
  excerpt         String?
  imageUrl        String?
  slug            String     @unique
  isPublished     Boolean    @default(false)
  viewCount       Int        @default(0)
  tags            String?
  keywords        String?
  metaDescription String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  publishedAt     DateTime?

  // İlişkiler
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  comments    Comment[]
  likes       Like[]
}







model Movie {
  id             String   @id @default(cuid())
  title          String
  description    String
  posterUrl      String?      // Filmin küçük afişi
  backgroundUrl  String?      // Detay sayfasında göstereceğin büyük arka plan
  trailerUrl     String?      // Fragman linki (YouTube vs.)
  rating         Float?       // IMDb veya senin belirlediğin puan
  releaseYear    Int?         // Çıkış yılı
  genres         String[]     // Tür listesi ["Action", "Drama"] gibi
  slug           String   @unique
  status         MovieStatus  @default(PLAN_TO_WATCH) // İzleme durumu
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Sadece admin ekleyecek ama ilişki yine User tablosuna gider
  author   User   @relation(fields: [authorId], references: [id])
  authorId String


    comments    Comment[]
  likes       Like[]
}

enum MovieStatus {
  WATCHED        // İzlendi
  PLAN_TO_WATCH  // İzlenecek
}




model Book {
  id              String    @id @default(cuid())
  title           String
  authorName      String?   // Kitabın yazarı
  coverImageUrl   String?   // Kitap kapağı görseli
  description     String?   // Kitap özeti / açıklaması
  isbn            String?   @unique // ISBN numarası (isteğe bağlı ama faydalı)
  publisher       String?   // Yayınevi
  publishYear     Int?      // Yayın yılı
  pageCount       Int?      // Sayfa sayısı
  myRating        Float?    // Sizin verdiğiniz puan (ör: 1.0 - 5.0)
  slug            String    @unique // URL dostu benzersiz isim (ör: 'sineklerin-tanrisi')
  status          BookStatus @default(READ) // Okuma durumu (okundu, okunuyor, okunacak)
  genres          String[]  // Tür listesi ["Roman", "Fantastik"] gibi

  // İlişkiler
  author          User      @relation(fields: [authorId], references: [id]) 
  authorId        String
  comments        Comment[]
  likes           Like[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum BookStatus {
  READ          // Okundu
  READING       // Okunuyor
  PLAN_TO_READ  // Okunacak
}

// Beğeniler
model Like {
  id        String   @id @default(cuid())
  movie   Movie?  @relation(fields: [movieId], references: [id])
  movieId String?
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?
  book      Book?     @relation(fields: [bookId], references: [id]) 
  bookId    String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

// Yorumlar
model Comment {
  id        String    @id @default(cuid())
  content   String
  movie    Movie?   @relation(fields: [movieId], references: [id])
  movieId  String?
  post      Post?      @relation(fields: [postId], references: [id])
  postId    String?
  book        Book?     @relation(fields: [bookId], references: [id]) // Book ilişkisi eklendi
  bookId      String?
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  parent    Comment?  @relation("Reply", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  replies   Comment[] @relation("Reply")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                       String  @id @default(cuid()) // 
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // 
}

model Session {
  id           String   @id @default(cuid()) // 
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // 
}

// WebAuthn desteği için
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
